// automatically generated by the FlatBuffers compiler, do not modify

package io.flutter.plugins.googlemaps;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ModelSchema extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ModelSchema getRootAsModelSchema(ByteBuffer _bb) { return getRootAsModelSchema(_bb, new ModelSchema()); }
  public static ModelSchema getRootAsModelSchema(ByteBuffer _bb, ModelSchema obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ModelSchema __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String Names(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int NamesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector NamesVector() { return NamesVector(new StringVector()); }
  public StringVector NamesVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public ModelFrame Frames(int j) { return Frames(new ModelFrame(), j); }
  public ModelFrame Frames(ModelFrame obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int FramesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ModelFrame.Vector FramesVector() { return FramesVector(new ModelFrame.Vector()); }
  public ModelFrame.Vector FramesVector(ModelFrame.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createModelSchema(FlatBufferBuilder builder,
      int NamesOffset,
      int FramesOffset) {
    builder.startTable(2);
    ModelSchema.addFrames(builder, FramesOffset);
    ModelSchema.addNames(builder, NamesOffset);
    return ModelSchema.endModelSchema(builder);
  }

  public static void startModelSchema(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addNames(FlatBufferBuilder builder, int NamesOffset) { builder.addOffset(0, NamesOffset, 0); }
  public static int createNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFrames(FlatBufferBuilder builder, int FramesOffset) { builder.addOffset(1, FramesOffset, 0); }
  public static int createFramesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFramesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endModelSchema(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ModelSchema get(int j) { return get(new ModelSchema(), j); }
    public ModelSchema get(ModelSchema obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

